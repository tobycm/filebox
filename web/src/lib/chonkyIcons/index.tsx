import {
  IconAlertTriangle,
  IconArrowDown,
  IconBox,
  IconBrandGit,
  IconBrandNodejs,
  IconBrandPhp,
  IconBrandPython,
  IconBrandRust,
  IconBrandUbuntu,
  IconBrandWindows,
  IconChevronDown,
  IconChevronRight,
  IconClipboardPlus,
  IconCopy,
  IconCube,
  IconDatabase,
  IconDownload,
  IconEraser,
  IconEyeOff,
  IconFile,
  IconFileCode,
  IconFileText,
  IconFileTypeDocx,
  IconFileTypePdf,
  IconFileTypeXls,
  IconFileZip,
  IconFolder,
  IconFolderOpen,
  IconFolderPlus,
  IconFolderUp,
  IconInfoCircle,
  IconKey,
  IconLayoutGrid,
  IconLayoutGridAdd,
  IconLayoutList,
  IconLicense,
  IconLink,
  IconList,
  IconLock,
  IconMinus,
  IconMusic,
  IconPhoto,
  IconRun,
  IconSearch,
  IconSettings,
  IconShare,
  IconSortAscending2,
  IconSortDescending2,
  IconTerminal,
  IconToggleLeft,
  IconToggleRight,
  IconTrash,
  IconUpload,
  IconUsers,
  IconVideo,
  IconX,
} from "@tabler/icons-react";

import type { ChonkyIconProps } from "@aperturerobotics/chonky";
import { Box } from "@mantine/core";
import { Icon as TablerIconType } from "@tabler/icons-react";
import React from "react";

// ðŸ‘‰ Move IconMap DOWN HERE~ ðŸ’– So it's not accessed before init!
export const ChonkyIconTabler: React.FC<ChonkyIconProps> = React.memo(({ icon, className, style, ...rest }) => {
  const IconMap = {
    loading: IconSettings,
    dropdown: IconChevronDown,
    placeholder: IconMinus,
    dndDragging: IconRun,
    dndCanDrop: IconArrowDown,
    dndCannotDrop: IconX,
    openFiles: IconBox,
    openParentFolder: IconFolderUp,
    copy: IconCopy,
    paste: IconClipboardPlus,
    share: IconShare,
    search: IconSearch,
    selectAllFiles: IconCube,
    clearSelection: IconEraser,
    sortAsc: IconSortAscending2,
    sortDesc: IconSortDescending2,
    toggleOn: IconToggleRight,
    toggleOff: IconToggleLeft,
    list: IconList,
    compact: IconLayoutList,
    smallThumbnail: IconLayoutGrid,
    largeThumbnail: IconLayoutGridAdd,
    folder: IconFolder,
    folderCreate: IconFolderPlus,
    folderOpen: IconFolderOpen,
    folderChainSeparator: IconChevronRight,
    download: IconDownload,
    upload: IconUpload,
    trash: IconTrash,
    fallbackIcon: IconAlertTriangle,
    symlink: IconLink,
    hidden: IconEyeOff,
    file: IconFile,
    license: IconLicense,
    code: IconFileCode,
    config: IconSettings,
    model: IconCube,
    database: IconDatabase,
    text: IconFileText,
    archive: IconFileZip,
    image: IconPhoto,
    video: IconVideo,
    music: IconMusic,
    terminal: IconTerminal,
    users: IconUsers,
    info: IconInfoCircle,
    key: IconKey,
    lock: IconLock,
    ubuntu: IconBrandUbuntu,
    windows: IconBrandWindows,
    python: IconBrandPython,
    php: IconBrandPhp,
    nodejs: IconBrandNodejs,
    rust: IconBrandRust,
    git: IconBrandGit,
    pdf: IconFileTypePdf,
    excel: IconFileTypeXls,
    word: IconFileTypeDocx,
  };

  const IconComponent = typeof icon === "object" ? (icon as TablerIconType) : IconMap[icon as keyof typeof IconMap] ?? IconMap.fallbackIcon;

  return <Box component={IconComponent} className={className} style={style} stroke={1.5} size={20} {...rest} />;
});
